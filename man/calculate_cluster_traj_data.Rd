% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DE_PART_results_functions.R
\name{calculate_cluster_traj_data}
\alias{calculate_cluster_traj_data}
\title{Calcualte trajectory of clusters}
\usage{
calculate_cluster_traj_data(object, custom_cmap = NULL, scale_feat = TRUE)
}
\arguments{
\item{object}{A timeseries object}

\item{custom_cmap}{A custom cluster map to be used instead of the cmap contained within the object}

\item{scale_feat}{If the genes should be scaled/transformed using scale feature sum}
}
\value{
A dataframe containing the transformed or non-transformed gene values for
each cluster
}
\description{
Function which calculates the trajectory data for each cluster
Trajectory data is defined as the impact a gene has on time
This is obtained by performing a scale feature sum, where each
gene is 'equalized' by dividing the value of the gene (at each sample)
by the rowSum of the gene (the addition of the gene's values across all samples)
}
\examples{
TS_object<-create_example_object_for_R()
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
#Perform conditional differential gene expression analysis
TS_object<-conditional_DE_wrapper(TS_object)

#Extract genes for PART clustering based on defined log(2)foldChange threshold
signi_genes<-select_genes_with_l2fc(TS_object)

#Use all samples, but implement a custom order. In this case it is reversed
sample_data<-exp_sample_data(TS_object)
samps_2<-sample_data$sample[sample_data$group==TS_object@group_names[2]]
samps_1<-sample_data$sample[sample_data$group==TS_object@group_names[1]]

#Create the matrix that will be used for PART clustering
TS_object<-prep_counts_for_PART(object=TS_object,target_genes=signi_genes,scale=TRUE,target_samples=c(samps_2,samps_1))
TS_object<-compute_PART(TS_object,part_recursion=10,part_min_clust=10,dist_param="euclidean", hclust_param="average")
ts_data<-calculate_cluster_traj_data(TS_object,scale_feat=TRUE) #Calculate scaled gene values for genes of clusters

}
