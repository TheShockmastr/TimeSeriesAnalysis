% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MDS_GO_results_functions.R
\name{calculate_and_format_MDS}
\alias{calculate_and_format_MDS}
\title{Calculate MDS matrix}
\usage{
calculate_and_format_MDS(GO_df, semantic_data, measure = "Wang")
}
\arguments{
\item{GO_df}{The dataframe of GOs as returned by \code{gprofiler_cluster_analysis}}

\item{measure}{the measuring method for semantic distance}

\item{sem_data}{semantic similarity data as created by the godata function}
}
\value{
res.mds A dataframe containing the MDS dimensions, along with groupings and
colors which are equivalent to the cluster colors
}
\description{
Function which calculates semantic distance and MDS from a dataframe of GOs

The function uses a GOSemSim object to calculates the termdistance, followed
by a MDS calculation.
The resulting dataframe is formatted to be used in \code{plot_MDS}

This function is used to create a GO term plot for WGCNA modules
}
\examples{
TS_object<-create_example_object_for_R()
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
#Perform conditional differential gene expression analysis
TS_object<-conditional_DE_wrapper(TS_object)
#Extract genes for PART clustering based on defined log(2)foldChange threshold
signi_genes<-select_genes_with_l2fc(TS_object)

#Use all samples, but implement a custom order. In this case it is reversed
samps_2<-TS_object@sample_data$sample[TS_object@sample_data$group==TS_object@group_names[2]]
samps_1<-TS_object@sample_data$sample[TS_object@sample_data$group==TS_object@group_names[1]]

#Create the matrix that will be used for PART clustering
TS_object<-prep_counts_for_PART(object=TS_object,target_genes=signi_genes,scale=TRUE,target_samples=c(samps_2,samps_1))
TS_object<-compute_PART(TS_object,part_recursion=10,part_min_clust=10,dist_param="euclidean", hclust_param="average")
TS_object<-run_gprofiler_PART_clusters(TS_object) #Run the gprofiler analysis
#Results saved to created directory
dir.create('example_location')
gpro_res<-gprofiler_cluster_analysis(TS_object,'GO:BP',save_path=dir.create('example_location'))
GO_clusters<-gpro_res[['GO_df']]
TS_object <- add_semantic_similarity_data(TS_object,ont_sem_sim='BP')
plot_data<-calculate_and_format_MDS(GO_clusters,TS_object@sem_list)

}
