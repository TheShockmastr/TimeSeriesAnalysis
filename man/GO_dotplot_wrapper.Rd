% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MDS_GO_results_functions.R
\name{GO_dotplot_wrapper}
\alias{GO_dotplot_wrapper}
\title{Create gprofiler dotplots}
\usage{
GO_dotplot_wrapper(
  gpro_file_location,
  target_ontology,
  top_n,
  custom_width = NULL,
  custom_height = NULL,
  return_plot = FALSE
)
}
\arguments{
\item{gpro_file_location}{The location where the 'gprofiler_results' folder is}

\item{target_ontology}{The targeted ontology ex: 'REAC' or 'GO:BP'}

\item{top_n}{The number of top GOs to plot per cluster}

\item{custom_width}{A custom value for the width of the plot}

\item{custom_height}{A custom value for the height of the plot}

\item{return_plot}{Boolean indicating if the plot should be returned}
}
\value{
if specified, the function will return the ggplot2 object for the dotplot
}
\description{
Wrapper function for the creation of a dotplot which summarises the gprofiler findings
for a specified ontology.

The function reads the results for a location. It will automatically search for the
'gprofiler_results/data_files' folder in the procided location. This is should be located
in the TS_results folder, but can change based on the user.

The function will attempt to create the plot with proper width and height,
but these can be over-written by providing them to the function.

The function will save the plot in the location provided through the
gpro_file_location parameter.
}
\examples{
TS_object<-create_example_object_for_R()
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
#Perform conditional differential gene expression analysis
TS_object<-conditional_DE_wrapper(TS_object)
#Extract genes for PART clustering based on defined log(2)foldChange threshold
signi_genes<-select_genes_with_l2fc(TS_object)

#Use all samples, but implement a custom order. In this case it is reversed
sample_data<-exp_sample_data(TS_object)
samps_2<-sample_data$sample[sample_data$group==TS_object@group_names[2]]
samps_1<-sample_data$sample[sample_data$group==TS_object@group_names[1]]

#Create the matrix that will be used for PART clustering
TS_object<-prep_counts_for_PART(object=TS_object,target_genes=signi_genes,scale=TRUE,target_samples=c(samps_2,samps_1))
TS_object<-compute_PART(TS_object,part_recursion=10,part_min_clust=10,dist_param="euclidean", hclust_param="average")
TS_object<-run_gprofiler_PART_clusters(TS_object) #Run the gprofiler analysis
#Set to NULL to not save results
gpro_res<-gprofiler_cluster_analysis(TS_object,'GO:BP',save_path=NULL)
GO_clusters<-gpro_res[['GO_df']]
TS_object <- add_semantic_similarity_data(TS_object,ont_sem_sim='BP')
target_ancestors<-c('GO:0002253','GO:0019882','GO:0002404','GO:0002339','GO:0042386',
                    'GO:0035172','GO:0002252','GO:0006955','GO:0002520','GO:0090713',
                    'GO:0045321','GO:0001776','GO:0050900','GO:0031294','GO:0002262',
                    'GO:0002683','GO:0002684','GO:0002440','GO:0002682','GO:0002200',
                    'GO:0045058','GO:0002507')
GOs_ancestors_clust<-find_relation_to_ancestors(target_ancestors,GO_clusters,ontology = 'BP')
my_dotplot<-dotplot_ancestors(GOs_ancestors_clust,enrichment_dta=FALSE,use_names=TRUE)#'
}
