% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MDS_GO_results_functions.R
\name{gprofiler_cluster_analysis}
\alias{gprofiler_cluster_analysis}
\title{Plot gprofiler results}
\usage{
gprofiler_cluster_analysis(
  object,
  ontology,
  save_path = NULL,
  return_specific_cluster = NULL
)
}
\arguments{
\item{object}{A time series object}

\item{ontology}{the ontology that will be returned in the dataframe (ex: GO:BP)}

\item{save_path}{The folder path to save results if gprofiler results are to be saved}

\item{return_specific_cluster}{String to return the gost plot of a specific cluster}
}
\value{
GO_df A dataframe containing all the GOs (ID) found, their cluster, and the term name
}
\description{
Creates a dataframe of GO's based on the gprofiler results stored in a time series
object. The dataframe is specific to the requested ontology

If save_path is not null, the gprofiler results will be saved to the designated
location in both csv and html (interactive plot) format.
}
\examples{
TS_object<-create_example_object_for_R()
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
#Perform conditional differential gene expression analysis
TS_object<-conditional_DE_wrapper(TS_object)
#Extract genes for PART clustering based on defined log(2)foldChange threshold
signi_genes<-select_genes_with_l2fc(TS_object)

#Use all samples, but implement a custom order. In this case it is reversed
sample_data<-exp_sample_data(TS_object)
samps_2<-sample_data$sample[sample_data$group==TS_object@group_names[2]]
samps_1<-sample_data$sample[sample_data$group==TS_object@group_names[1]]

#Create the matrix that will be used for PART clustering
TS_object<-prep_counts_for_PART(object=TS_object,target_genes=signi_genes,scale=TRUE,target_samples=c(samps_2,samps_1))
TS_object<-compute_PART(TS_object,part_recursion=10,part_min_clust=10,dist_param="euclidean", hclust_param="average")
TS_object<-run_gprofiler_PART_clusters(TS_object) #Run the gprofiler analysis
#Results saved to created directory
dir.create('example_location')
gpro_res<-gprofiler_cluster_analysis(TS_object,'GO:BP',save_path=dir.create('example_location'))

}
