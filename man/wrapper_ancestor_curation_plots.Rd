% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MDS_GO_results_functions.R
\name{wrapper_ancestor_curation_plots}
\alias{wrapper_ancestor_curation_plots}
\title{Create ancestor query plots}
\usage{
wrapper_ancestor_curation_plots(
  GO_df,
  sem_data,
  use_names = TRUE,
  target_dir = "TS_results/",
  return_plot = FALSE
)
}
\arguments{
\item{GO_df}{The dataframe of GOs as returned by \code{find_relation_to_ancestors}}

\item{sem_data}{semantic similarity data as created by the godata function}

\item{use_names}{boolean indicating if names or IDs should be used}

\item{target_dir}{string indicating the save location of the plots}

\item{return_plot}{boolean indicating if the plot should be returned}
}
\value{
if specified, will return a list containing the ggplot2 object for the dotplot
and the plotly object for the MDS plot.
}
\description{
Wrapper function which makes the necessary calls to plots ancestor curation plots

These plots find all terms which are children of the provided ancestors within the
specified ontology.

The function will plot and save a dotplot as well as an interactive MDS plot
}
\examples{
TS_object<-create_example_object_for_R()
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
#Perform conditional differential gene expression analysis
TS_object<-conditional_DE_wrapper(TS_object)
#Extract genes for PART clustering based on defined log(2)foldChange threshold
signi_genes<-select_genes_with_l2fc(TS_object)

#Use all samples, but implement a custom order. In this case it is reversed
sample_data<-exp_sample_data(TS_object)
samps_2<-sample_data$sample[sample_data$group==TS_object@group_names[2]]
samps_1<-sample_data$sample[sample_data$group==TS_object@group_names[1]]

#Create the matrix that will be used for PART clustering
TS_object<-prep_counts_for_PART(object=TS_object,target_genes=signi_genes,scale=TRUE,target_samples=c(samps_2,samps_1))
TS_object<-compute_PART(TS_object,part_recursion=10,part_min_clust=10,dist_param="euclidean", hclust_param="average")
TS_object<-run_gprofiler_PART_clusters(TS_object,vignette_run=TRUE) #Run the gprofiler analysis
#Create directory
dir.create('example_location')
gpro_res<-gprofiler_cluster_analysis(TS_object,'GO:BP',save_path='example_location')
GO_clusters<-gpro_res[['GO_df']]
TS_object <- add_semantic_similarity_data(TS_object,ont_sem_sim='BP')
target_ancestors<-c('GO:0002253','GO:0019882','GO:0002404','GO:0002339','GO:0042386',
                    'GO:0035172','GO:0002252','GO:0006955','GO:0002520','GO:0090713',
                    'GO:0045321','GO:0001776','GO:0050900','GO:0031294','GO:0002262',
                    'GO:0002683','GO:0002684','GO:0002440','GO:0002682','GO:0002200',
                    'GO:0045058','GO:0002507')
GOs_ancestors_clust<-find_relation_to_ancestors(target_ancestors,GO_clusters,ontology = 'BP')
#Plots will be returned, but also saved to directory
ancestor_plots<-wrapper_ancestor_curation_plots(GOs_ancestors_clust,TS_object@sem_list,return_plot=TRUE,target_dir='example_location/')

}
