% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DE_PART_results_functions.R
\name{wrapper_cluster_trajectory}
\alias{wrapper_cluster_trajectory}
\title{Plot cluster trajectory for all PART clusters}
\usage{
wrapper_cluster_trajectory(
  object,
  cluster_traj_dta,
  mean_cluster_traj_dta,
  log_TP = FALSE,
  plot_name = "Ctraj"
)
}
\arguments{
\item{cluster_traj_dta}{The trajectory data for all clusters being calculated
The data is calculated/obtained from \code{calculate_cluster_traj_data} function}

\item{plot_name}{The name given to the plot file as it is saved}

\item{mean_cluster_traj_data}{The mean value for each clusters trajectory,
the data is calculated/obtained from \code{calculated_mean_cluster_traj} function}
}
\value{
None
}
\description{
Function which plots the trajectory of all the clusters given
The function will split the clusters into groups of 8 to keep
the figures clean. If multiple figures are created, they will be names
1_of_x until it reaches x_of_x.
}
\examples{
TS_object<-create_example_object_for_R()
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
#Perform conditional differential gene expression analysis
TS_object<-conditional_DE_wrapper(TS_object)

#Extract genes for PART clustering based on defined log(2)foldChange threshold
signi_genes<-select_genes_with_l2fc(TS_object)

#Use all samples, but implement a custom order. In this case it is reversed
samps_2<-TS_object@sample_data$sample[TS_object@sample_data$group==TS_object@group_names[2]]
samps_1<-TS_object@sample_data$sample[TS_object@sample_data$group==TS_object@group_names[1]]

#Create the matrix that will be used for PART clustering
TS_object<-prep_counts_for_PART(object=TS_object,target_genes=signi_genes,scale=TRUE,target_samples=c(samps_2,samps_1))
TS_object<-compute_PART(TS_object,part_recursion=10,part_min_clust=10,dist_param="euclidean", hclust_param="average")
ts_data<-calculate_cluster_traj_data(TS_object,scale_feat=TRUE) #Calculate scaled gene values for genes of clusters
mean_ts_data<-calculate_mean_cluster_traj(ts_data) #Calculate the mean scaled values for each cluster
wrapper_cluster_trajectory(TS_object,ts_data,mean_ts_data,log_TP=FALSE,plot_name='Ctraj')

}
