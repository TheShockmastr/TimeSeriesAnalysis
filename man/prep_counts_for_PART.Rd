% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PART.R
\name{prep_counts_for_PART}
\alias{prep_counts_for_PART}
\title{Format data for PART}
\usage{
prep_counts_for_PART(object, target_genes, scale, target_samples)
}
\arguments{
\item{object}{A time series object}

\item{target_genes}{Vector of genes to keep/use}

\item{scale}{Boolean indicating if the data should be scaled}

\item{target_samples}{Vector of samples to keep/use}
}
\value{
The timeseries object with the added PART count matrix
}
\description{
The function retrieves the counts from the time series object and filters
it to only contain relevant genes and samples. The data can also be scaled
if the parameter 'scale' is set to TRUE
}
\examples{
TS_object<-create_example_object_for_R()
TS_object <- normalize_timeSeries_with_deseq2(time_object=TS_object)
#Perform conditional differential gene expression analysis
TS_object<-conditional_DE_wrapper(TS_object)
#Extract genes for PART clustering based on defined log(2)foldChange threshold
signi_genes<-select_genes_with_l2fc(TS_object)

#Use all samples, but implement a custom order. In this case it is reversed
sample_data<-exp_sample_data(TS_object)
samps_2<-sample_data$sample[sample_data$group==TS_object@group_names[2]]
samps_1<-sample_data$sample[sample_data$group==TS_object@group_names[1]]

#Create the matrix that will be used for PART clustering
TS_object<-prep_counts_for_PART(object=TS_object,target_genes=all_genes,scale=TRUE,target_samples=c(samps_2,samps_1))
TS_object@PART_results$part_matrix

}
